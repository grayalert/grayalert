plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.1'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'com.google.cloud.tools.jib' version '3.1.4'
    id 'jacoco' 
}

group = "com.github"
version = "1.0-SNAPSHOT"

repositories {
    mavenCentral()
    mavenLocal()
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

dependencies {
    implementation 'me.tongfei:progressbar:0.9.1'

    implementation 'io.github.openfeign:feign-core:12.4'
    implementation 'io.github.openfeign:feign-httpclient:12.4'
    implementation "io.github.openfeign:feign-jackson:12.4"
    implementation "io.github.openfeign:feign-slf4j:12.4"

    implementation('org.apache.commons:commons-collections4:4.3')
    implementation 'org.apache.commons:commons-csv:1.8'

    implementation('com.mysql:mysql-connector-j:8.0.32')
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-starter-web'

    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'jakarta.servlet:jakarta.servlet-api:6.0.0'

    testImplementation 'com.h2database:h2'
    testImplementation 'com.github.tomakehurst:wiremock-jre8-standalone:3.0.1'

    testImplementation(platform("org.junit:junit-bom:5.9.1"))
    testImplementation("org.junit.jupiter:junit-jupiter:5.9.2")
}

tasks.withType(JavaCompile) {
    options.compilerArgs << '-parameters'
}

tasks.test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
        csv.required = false
        html.required = true
        html.outputLocation = layout.buildDirectory.dir('reports/coverage')
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.7
            }
        }
    }
}

// Add task to generate coverage badge
task generateCoverageBadge(type: Exec) {
    dependsOn jacocoTestReport
    commandLine 'sh', '-c', '''
        COVERAGE=$(cat build/reports/jacoco/test/jacocoTestReport.xml | grep -o "line-rate=\\"[0-9.]*\\"" | cut -d\\" -f2)
        PERCENTAGE=$(echo "$COVERAGE * 100" | bc | awk "{printf \\"%.0f%%\\", $1}")
        if (( $(echo "$COVERAGE >= 0.9" | bc -l) )); then COLOR=brightgreen
        elif (( $(echo "$COVERAGE >= 0.8" | bc -l) )); then COLOR=green
        elif (( $(echo "$COVERAGE >= 0.7" | bc -l) )); then COLOR=yellow
        else COLOR=red
        fi
        echo "{\\"schemaVersion\\": 1, \\"label\\": \\"coverage\\", \\"message\\": \\"$PERCENTAGE\\", \\"color\\": \\"$COLOR\\"}" > coverage.json
    '''
}

check {
    dependsOn jacocoTestCoverageVerification
}

// alternatively just build using Dockerfile

jib {
    from {
        image = 'amazoncorretto:17-alpine'
    }
    to {
        image="grayalert"
    }
    container {
        jvmFlags = ['-Xms512m','-Xmx1024m', '-Xdebug']
        mainClass = 'com.github.grayalert.App'
        args = []
        ports = ['8080/tcp']
    }
}